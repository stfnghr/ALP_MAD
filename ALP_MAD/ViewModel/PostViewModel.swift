//
//  PostViewModel.swift
//  ALP_MAD
//
//  Created by student on 27/05/25.
//

// ViewModels/PostViewModel.swift
import Foundation
import SwiftUI

class PostViewModel: ObservableObject {
    @Published var isLoading: Bool = false
    @Published var errorMessage: String? = nil
    @Published var postCreationSuccess: Bool = false

    // Corrected Dummy author to match the provided UserModel
    private var dummyAuthor: UserModel {
        let randomNumber = Int.random(in: 1...100)
        return UserModel(
            // id will be auto-generated by UserModel's `var id = UUID()`
            name: "Dummy User \(randomNumber)",
            email: "dummy\(randomNumber)@example.com",
            password: "dummyPassword123", // Placeholder for dummy data
            phoneNumber: "555-01\(String(format: "%02d", randomNumber))" // Example dummy phone
        )
    }

    func createPost(itemName: String, description: String, location: String) {
        self.isLoading = true
        self.errorMessage = nil
        self.postCreationSuccess = false

        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            let newPost = PostModel(
                // id for PostModel is also auto-generated by its own `var id = UUID()`
                author: self.dummyAuthor, // Use the corrected dummyAuthor
                itemName: itemName,
                description: description,
                location: location,
                postDate: Date(),
                status: true // Assuming true = active/newly reported (e.g., "Lost")
            )

            print("DUMMY POST CREATED: \(newPost)")
            print("Author details: ID - \(newPost.author.id), Name - \(newPost.author.name), Email - \(newPost.author.email)")

            self.isLoading = false
            self.postCreationSuccess = true
        }
    }
}
